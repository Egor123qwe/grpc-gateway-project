// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: api/api.proto

package desc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuoteService_GetRandomQuote_FullMethodName = "/api.QuoteService/GetRandomQuote"
	QuoteService_LikeQuote_FullMethodName      = "/api.QuoteService/LikeQuote"
	QuoteService_DislikeQuote_FullMethodName   = "/api.QuoteService/DislikeQuote"
)

// QuoteServiceClient is the client API for QuoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteServiceClient interface {
	GetRandomQuote(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Quote, error)
	LikeQuote(ctx context.Context, in *RatingRequest, opts ...grpc.CallOption) (*RatingResponse, error)
	DislikeQuote(ctx context.Context, in *RatingRequest, opts ...grpc.CallOption) (*RatingResponse, error)
}

type quoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteServiceClient(cc grpc.ClientConnInterface) QuoteServiceClient {
	return &quoteServiceClient{cc}
}

func (c *quoteServiceClient) GetRandomQuote(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Quote, error) {
	out := new(Quote)
	err := c.cc.Invoke(ctx, QuoteService_GetRandomQuote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) LikeQuote(ctx context.Context, in *RatingRequest, opts ...grpc.CallOption) (*RatingResponse, error) {
	out := new(RatingResponse)
	err := c.cc.Invoke(ctx, QuoteService_LikeQuote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) DislikeQuote(ctx context.Context, in *RatingRequest, opts ...grpc.CallOption) (*RatingResponse, error) {
	out := new(RatingResponse)
	err := c.cc.Invoke(ctx, QuoteService_DislikeQuote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoteServiceServer is the server API for QuoteService service.
// All implementations must embed UnimplementedQuoteServiceServer
// for forward compatibility
type QuoteServiceServer interface {
	GetRandomQuote(context.Context, *Empty) (*Quote, error)
	LikeQuote(context.Context, *RatingRequest) (*RatingResponse, error)
	DislikeQuote(context.Context, *RatingRequest) (*RatingResponse, error)
	mustEmbedUnimplementedQuoteServiceServer()
}

// UnimplementedQuoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuoteServiceServer struct {
}

func (UnimplementedQuoteServiceServer) GetRandomQuote(context.Context, *Empty) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomQuote not implemented")
}
func (UnimplementedQuoteServiceServer) LikeQuote(context.Context, *RatingRequest) (*RatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeQuote not implemented")
}
func (UnimplementedQuoteServiceServer) DislikeQuote(context.Context, *RatingRequest) (*RatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DislikeQuote not implemented")
}
func (UnimplementedQuoteServiceServer) mustEmbedUnimplementedQuoteServiceServer() {}

// UnsafeQuoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteServiceServer will
// result in compilation errors.
type UnsafeQuoteServiceServer interface {
	mustEmbedUnimplementedQuoteServiceServer()
}

func RegisterQuoteServiceServer(s grpc.ServiceRegistrar, srv QuoteServiceServer) {
	s.RegisterService(&QuoteService_ServiceDesc, srv)
}

func _QuoteService_GetRandomQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).GetRandomQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuoteService_GetRandomQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).GetRandomQuote(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_LikeQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).LikeQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuoteService_LikeQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).LikeQuote(ctx, req.(*RatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_DislikeQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).DislikeQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuoteService_DislikeQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).DislikeQuote(ctx, req.(*RatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuoteService_ServiceDesc is the grpc.ServiceDesc for QuoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.QuoteService",
	HandlerType: (*QuoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandomQuote",
			Handler:    _QuoteService_GetRandomQuote_Handler,
		},
		{
			MethodName: "LikeQuote",
			Handler:    _QuoteService_LikeQuote_Handler,
		},
		{
			MethodName: "DislikeQuote",
			Handler:    _QuoteService_DislikeQuote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
